#  SkylarkOS Boot Splash
#
#  Adapted by Chandler Newman
#  Copyright (C) 2019 Chandler Newman
#

#  ubuntu-logo.script - boot splash plugin
# 
#  Copyright (C) 2009 Canonical Ltd.
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
# 
#  Written by: Alberto Milone <alberto.milone@canonical.com>
#
#  Based on the example provided with the "script plugin" written by:
#              Charlie Brej   <cbrej@cs.man.ac.uk>
#
#  Question stuff written by: Markus Waas <mail@markuswaas.de>
#
# 

# ----------------------------------------------------------------
# ----------------------------- THEME ----------------------------
# ----------------------------------------------------------------

# Set the text colour in (rgb / 256)
text_colour.red = 1.0;
text_colour.green = 1.0;
text_colour.blue = 1.0;

# Tinted text
tinted_text_colour.red = 0.50;
tinted_text_colour.green = 0.50;
tinted_text_colour.blue = 0.50;

# Action Text - #ffffff - RGB 255 255 255
action_text_colour.red = 1.0;
action_text_colour.green = 1.0;
action_text_colour.blue = 1.0;

# Orange - #ff4012 - RGB 255 64 18
debugsprite = Sprite();
debugsprite_bottom = Sprite();
debugsprite_medium = Sprite();

# Ubuntu Font
ubuntufont = "Ubuntu, sans-serif 11";
ubuntualignment = "center";

# ----------------------------------------------------------------
# ---------------------------- HELPERS ---------------------------
# ----------------------------------------------------------------
# General purpose function to create text
fun WriteText (text, colour) {
    image = Image.Text (text, colour.red, colour.green, colour.blue, color.alpha, ubuntufont, ubuntualignment);
    return image;
}

fun ImageToText (text) {
    image = WriteText (text, text_colour);
    return image;
}

fun ImageToTintedText (text) {
    image = WriteText (text, tinted_text_colour);
    return image;
}

fun ImageToActionText (text) {
    image = WriteText (text, action_text_colour);
    return image;
}

fun Debug(text) {
    debugsprite.SetImage(ImageToText (text));
}

fun DebugBottom(text) {
    debugsprite_bottom.SetImage(ImageToText (text));
    debugsprite_bottom.SetPosition(0, (Window.GetHeight (0) - 20), 1);
}

fun DebugMedium(text) {
    debugsprite_medium.SetImage(ImageToText (text));
    debugsprite_medium.SetPosition(0, (Window.GetHeight (0) - 60), 1);
}

# This is the equivalent for strstr()
fun StringString(string, substring) {
    start = 0;
    while (String(string).CharAt (start)) {
        walk = 0;
        while (String(substring).CharAt (walk) == String(string).CharAt (start + walk) ) {
            walk++;
            if (!String(substring).CharAt (walk)) return start;
        }
        start++;
    }
    
    return NULL;
}

fun StringLength (string) {
    index = 0;
    while (String(string).CharAt(index)) index++;
    return index;
}

fun StringCopy (source, beginning, end) {
    local.destination = "";
    for (index = beginning; ( ( (end == NULL) || (index <= end) ) && (String(source).CharAt(index)) ); index++) {
        local.destination += String(source).CharAt(index);
    }
    
    return local.destination;
}

# ----------------------------------------------------------------
# ---------------------------- GENERAL ---------------------------
# ----------------------------------------------------------------
Window.SetBackgroundTopColor (0, 0, 0);
Window.SetBackgroundBottomColor (0, 0, 0);
bits_per_pixel = Window.GetBitsPerPixel ();
status = "normal";

# are we currently prompting for a password?
prompt_active = 0;

# ----------------------------------------------------------------
# ----------------------------- LOGO -----------------------------
# ----------------------------------------------------------------
if (bits_per_pixel == 4) {
    logo_filename = "skylarkos-logo16.png";
    progress_dot_off_filename = "progress-dot-off16.png";
} else {
    logo_filename = "skylarkos-logo.png";
    progress_dot_off_filename = "progress-dot-off.png";
}

logo.original_image = Image (logo_filename);
ratio =  logo.original_image.GetWidth() / logo.original_image.GetHeight();
reduction = 0.15;
logo.image = logo.original_image.Scale(reduction * Window.GetWidth() , reduction / ratio *  Window.GetWidth());

logo.sprite = Sprite ();
logo.sprite.SetImage (logo.image);
logo.width = logo.image.GetWidth ();
logo.height = logo.image.GetHeight ();
logo.x = Window.GetX () + Window.GetWidth () / 2 - logo.width  / 2;
logo.y = Window.GetY () + Window.GetHeight () / 2 - logo.height;
logo.z = 1000;
logo.sprite.SetX (logo.x);
logo.sprite.SetY (logo.y);
logo.sprite.SetZ (logo.z);
logo.sprite.SetOpacity (1);

fun draw_logo () {
    logo.sprite.SetX (logo.x);
    logo.sprite.SetY (logo.y);
    logo.sprite.SetZ (logo.z);
    logo.sprite.SetOpacity (1);
}

# ----------------------------------------------------------------
# ------------------------- PROGRESS BAR -------------------------
# ----------------------------------------------------------------
progress_box.image = Image("progress-box.png");
progress_box.sprite = Sprite(progress_box.image);
progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = Window.GetY() + Window.GetHeight() * 0.75 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

progress_bar.original_image = Image("progress-bar.png");
progress_bar.sprite = Sprite();
progress_bar.x = progress_box.x + (progress_box.image.GetWidth() - progress_bar.original_image.GetWidth()) / 2;
progress_bar.y = progress_box.y + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

fun progress_callback (duration, progress) {
    if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress)) {
        progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage (progress_bar.image);
    }
}

#progress_callback(10, 0.5);
Plymouth.SetBootProgressFunction(progress_callback);

# ----------------------------------------------------------------
# ---------------------------- MESSAGE ---------------------------
# ----------------------------------------------------------------
message_notification[0].image = ImageToTintedText ("");
message_notification[1].image = ImageToTintedText ("");

first_line_height = ImageToTintedText ("AfpqtM").GetHeight();
top_of_the_text = progress_box.y + progress_box.image.GetHeight();

# label should be either a string or NULL
# Images for n lines will be created and returned as items of the
# message_label array
#
fun get_message_label (label, is_fake, is_action_line) {
    # Debug("Get Label position");
    local.message_label;
    
    if (is_fake)
        # Create a fake label so as to get the y coordinate of
        # a standard-length label.
        local.message_image = ImageToTintedText ("This is a fake message");
    else
        local.message_image = (is_action_line) && ImageToActionText (label) || ImageToTintedText (label);
        
    message_label.width = message_image.GetWidth ();
    message_label.height = message_image.GetHeight ();

    # Center the line horizontally
    message_label.x = Window.GetX () + Window.GetWidth () / 2 - message_label.width / 2;

    message_label.y = top_of_the_text;

    # Put the 2nd line below the fsck line
    if (is_action_line) {
        local.fsck_label.y = message_label.y + (first_line_height + first_line_height / 2);
        message_label.y = local.fsck_label.y + (first_line_height * 2);
    }

    # Debug("action label x = " + message_label.x + " y = " + message_label.y );

#    message_debug = "msg_x = " + message_label.x + " msg_y = " + message_label.y +
#                    "msg_width = " + message_label.width + " msg_height = " +
#                    message_label.height + " message = " + label;
#    Debug(message_debug);
    
    return message_label;

}

# Set up a message label
#
# NOTE: this is called when doing something like 'plymouth message "hello world"'
#
fun setup_message (message_text, x, y, z, index) {
    # Debug("Message setup");
    global.message_notification[index].image = (index) && ImageToActionText (message_text) || ImageToTintedText (message_text);

    # Set up the text message, if any
    message_notification[index].x = x;
    message_notification[index].y = y;
    message_notification[index].z = z;
    
    message_notification[index].sprite = Sprite ();
    message_notification[index].sprite.SetImage (message_notification[index].image);
    message_notification[index].sprite.SetX (message_notification[index].x);
    message_notification[index].sprite.SetY (message_notification[index].y);
    message_notification[index].sprite.SetZ (message_notification[index].z);

}

fun show_message (index) {
    if (global.message_notification[index].sprite) global.message_notification[index].sprite.SetOpacity(1);
}

fun hide_message (index) {
    if (global.message_notification[index].sprite) global.message_notification[index].sprite.SetOpacity(0);
}

# the callback function is called when new message should be displayed.
# First arg is message to display.
fun message_callback (message)
{
    # Debug("Message callback");
    is_fake = 0;
    if (!message || (message == "")) is_fake = 1;
    
    local.substring = "keys:";
    
    # Look for the "keys:" prefix
    local.keys = StringString(message, local.substring);
    
    local.is_action_line = (keys != NULL);
    #Debug("keys " + local.keys + " substring length = " + StringLength(local.substring));

    # Get the message without the "keys:" prefix
    if (keys != NULL)
        message = StringCopy (message, keys + StringLength(local.substring), NULL);

    # Get the message without the "fsckd-cancel-msg" prefix as we don't support i18n
    substring = "fsckd-cancel-msg:";
    keys = StringString(message, substring);
    if (keys != NULL)
        message = StringCopy(message, keys + StringLength(substring), NULL);

    local.label.is_fake = is_fake;
    label = get_message_label(message, is_fake, is_action_line);
    label.z = 10000;
    
    setup_message (message, label.x, label.y, label.z, is_action_line);
    if (prompt_active && local.is_action_line)
        hide_message (is_action_line);
    else
        show_message (is_action_line);

}

Plymouth.SetMessageFunction (message_callback);

#-----------------------------------------Display Password stuff -----------------------
#

fun password_dialogue_setup (message_label) {
    # Debug("Password dialog setup");
    
    local.entry;
    local.bullet_image;
    
    bullet_image = Image (progress_dot_off_filename);
    entry.image = Image ("password-field.png");
    
    # Hide the normal labels
    prompt_active = 1;
    if (message_notification[1].sprite) hide_message (1);
    
    # Set the prompt label
    label = get_message_label(message_label, 0, 1);
    label.z = 10000;
    
    setup_message (message_label, label.x, label.y, label.z, 2);
    show_message (2);

    # Set up the text entry which contains the bullets
    entry.sprite = Sprite ();
    entry.sprite.SetImage (entry.image);
    
    # Centre the box horizontally
    entry.x = Window.GetX () + Window.GetWidth () / 2 - entry.image.GetWidth () / 2;

    # Put the entry below the second label.
    entry.y = message_notification[2].y + label.height;

    #Debug ("entry x = " + entry.x + ", y = " + entry.y);
    entry.z = 10000;
    entry.sprite.SetX (entry.x);
    entry.sprite.SetY (entry.y);
    entry.sprite.SetZ (entry.z);

    global.password_dialogue = local;
}

fun password_dialogue_opacity (opacity) {
    # Debug("Password dialog opacity");
    global.password_dialogue.opacity = opacity;
    local = global.password_dialogue;

    # You can make the box translucent with a float
    # entry.sprite.SetOpacity (0.3);
    entry.sprite.SetOpacity (opacity);
    label.sprite.SetOpacity (opacity);
    
    if (bullets) {
        for (index = 0; bullets[index]; index++) {
            bullets[index].sprite.SetOpacity (opacity);
        }
    }
}


# The callback function is called when the display should display a password dialogue.
# First arg is prompt string, the second is the number of bullets.
fun display_password_callback (prompt, bullets) {
    # Debug("Password dialog setup");
    
    global.status = "password";
    if (!global.password_dialogue) password_dialogue_setup(prompt);
    password_dialogue_opacity (1);
    bullet_width = password_dialogue.bullet_image.GetWidth();
    bullet_y = password_dialogue.entry.y +
               password_dialogue.entry.image.GetHeight () / 2 -
               password_dialogue.bullet_image.GetHeight () / 2;
    margin = bullet_width;
    spaces = Math.Int( (password_dialogue.entry.image.GetWidth () - (margin * 2) ) / ( 2 * bullet_width / 3 ) );
    #Debug ("spaces = " + spaces + ", bullets = " + bullets);
    bullets_area.width = margin + spaces * ( 2 * bullet_width / 3);
    bullets_area.x = Window.GetX () + Window.GetWidth () / 2 - bullets_area.width / 2;
    #DebugBottom ("pwd_entry x = " + password_dialogue.entry.x + ", bullets_area.x = " + bullets_area.x + ", bullets_area.width = " + bullets_area.width);
    if (bullets > spaces)
        bullets = spaces;
    for (index = 0; password_dialogue.bullets[index] || index < spaces ; index++){
        if (!password_dialogue.bullets[index]) {
            password_dialogue.bullets[index].sprite = Sprite ();
            password_dialogue.bullets[index].sprite.SetImage (password_dialogue.bullet_image);
            password_dialogue.bullets[index].x = bullets_area.x + # password_dialogue.entry.x + margin +
                                                 index * ( 2 * bullet_width / 3 ) ;
            password_dialogue.bullets[index].sprite.SetX (password_dialogue.bullets[index].x);
            password_dialogue.bullets[index].y = bullet_y;
            password_dialogue.bullets[index].sprite.SetY (password_dialogue.bullets[index].y);
            password_dialogue.bullets[index].z = password_dialogue.entry.z + 100 - index;
            password_dialogue.bullets[index].sprite.SetZ (password_dialogue.bullets[index].z);
        }

        password_dialogue.bullets[index].sprite.SetOpacity (0);

        if (index < bullets ) {
            password_dialogue.bullets[index].sprite.SetOpacity (1);
        }
    }
}

#display_password_callback("Test prompt", 3);
Plymouth.SetDisplayPasswordFunction (display_password_callback); 

#-----------------------------------------Display Question stuff -----------------------

fun question_dialogue_setup (message_label, text_image) {
    #Debug("Question dialog setup");
    
    local.field;
    local.content;
    local.margin;
    
    field.image = Image ("password-field.png");
    content = Sprite ();    
    bullet_image = Image (progress_dot_off_filename);
    margin = bullet_image.GetWidth() / 2;
    
    # Hide the normal labels
    prompt_active = 1;
    if (message_notification[1].sprite) hide_message (1);
    
    # Set the prompt label
    label = get_message_label(message_label, 0, 1);
    label.z = 10000;
    
    setup_message (message_label, label.x, label.y, label.z, 2);
    show_message (2);

    # Set up the text field which contains the contents
    field.sprite = Sprite ();
    field.sprite.SetImage (field.image);
    
    # Centre the box horizontally
    field.x = Window.GetX () + Window.GetWidth () / 2 - field.image.GetWidth () / 2;    
    content_x = field.x + margin;

    # Put the field below the second label.
    field.y = message_notification[2].y + label.height;
    content_y = field.y + field.image.GetHeight () / 2 - text_image.GetHeight () / 2;

    #Debug ("field x = " + field.x + ", y = " + field.y);
    field.z = 10000;
    field.sprite.SetX (field.x);
    field.sprite.SetY (field.y);
    field.sprite.SetZ (field.z);   
    
    #Debug ("content_x = " + content_x + " content_y = " + content_y);
    content_z = field.z + 1;
    content.SetPosition (content_x, content_y, content_z);

    global.question_dialogue = local;
}

# The callback function is called when the display should display a question dialogue.
# First arg is prompt string, the second is the field contents.
fun display_question_callback (prompt, contents) {  
    global.status = "question";
    #Debug ("Reply: " + contents);

    textImage = ImageToText(contents); 
    if (!global.question_dialogue) {
        question_dialogue_setup(prompt, textImage);
    }    

    margin = global.question_dialogue.margin;
    fieldWidth = global.question_dialogue.field.image.GetWidth ();
    for (i = 0; ( (textImage.GetWidth () + 2 * margin ) > fieldWidth ); i++) {        
        textImage = ImageToText(StringCopy (contents, i, StringLength (contents)));
    }
     
    global.question_dialogue.content.SetImage (textImage);   
}


Plymouth.SetDisplayQuestionFunction (display_question_callback); 


# ----------------------------------------------------------------
# ---------------------------- DISPLAY ---------------------------
# ----------------------------------------------------------------

fun refresh_callback ()
{
    draw_logo ();
}

Plymouth.SetRefreshFunction (refresh_callback);

fun display_normal_callback ()
{
    global.status = "normal";
    if (global.password_dialogue) {
        password_dialogue_opacity (0);
        global.password_dialogue = NULL;
        if (message_notification[2].sprite) hide_message(2);
        prompt_active = 0;
    }
    if (global.question_dialogue) {
        question_dialogue_opacity (0);
        global.question_dialogue = NULL;
        if (message_notification[2].sprite) hide_message(2);
        prompt_active = 0;
    }
    
    if (message_notification[1].sprite) show_message (1);    
    
}

Plymouth.SetDisplayNormalFunction (display_normal_callback);

fun quit_callback ()
{
    logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);
